{"version":3,"sources":["app.js","controllers/colorlist.controller.js","controllers/resultdialog.controller.js","controllers/settings.controller.js","directives/imagedrop.directive.js","services/color.service.js","services/sass.service.js","services/settings.service.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('sassColorPalette', ['ui.sortable', 'ngDialog'])\n        .constant('PATTERN', /^[A-Za-z0-9\\-\\_]+$/)\n        .constant('EVENTS', {\n            COLORS_UPDATE: 'colorsUpdate',\n            SETTINGS_CHANGE: 'settingsChange'\n        });\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('sassColorPalette')\n        .controller('ColorListController', ColorListController);\n\n    /* @ngInject */\n    function ColorListController($scope, ngDialog, sassService, colorService, $rootScope, EVENTS, PATTERN, settingsService) {\n        var vm = this;\n\n        vm.settings = settingsService.getSettings();\n        vm.pattern = PATTERN;\n        vm.colors = [];\n        vm.showErrors = false;\n        vm.removeColor = removeColor;\n        vm.submitColorForm = submitColorForm;\n\n        vm.sortableOptions = {\n            handle: '.handle'\n        };\n\n        // Listen for changes in settings panel\n        $rootScope.$on(EVENTS.SETTINGS_CHANGE, handleSettingsUpdate);\n\n        // Listen colorsUpdated event dispatched by colorService\n        $rootScope.$on(EVENTS.COLORS_UPDATE, handleColorsUpdate);\n\n        /**\n         * Update settings on scope with settings from service\n         * @return {undefined}\n         */\n        function handleSettingsUpdate(event, data) {\n            vm.settings = data;\n\n            autofillColors();\n        }\n\n        /**\n         * get colors from service on colorsUpdate event\n         * @return {undefined}\n         */\n        function handleColorsUpdate() {\n            vm.colors = colorService.getColors();\n\n            // Make sure view gets updated\n            $scope.$apply();\n\n            autofillColors();\n        }\n\n        /**\n         * removes color at index\n         * @param {number} index\n         */\n        function removeColor(index) {\n            vm.colors.splice(index, 1);\n        }\n\n        /**\n         * Validates form and proceed to create sass output\n         * @return {undefined}\n         */\n        function submitColorForm() {\n            if ($scope.colorForm.$invalid) {\n                vm.showErrors = true;\n            } else {\n                sassService.createSass(vm.colors);\n\n                ngDialog.open({\n                    template: 'src/templates/resultdialog.html'\n                });\n            }\n        }\n\n        /**\n         * Fills name field with generated color name\n         * @return {undefined}\n         */\n        function autofillColors() {\n            vm.colors.forEach(function(color) {\n                // Before doing anything store custom name values\n                if (color.name && color.name !== color.autofill) {\n                    color.custom = color.name;\n                }\n\n                // Only autofill when no custom name is entered\n                if (vm.settings.autofill) {\n                    if (!color.name) {\n                        color.name = color.autofill;\n                    }\n                } else {\n                    if (color.custom) {\n                        color.name = color.custom;\n                    } else {\n                        color.name = '';\n                    }\n                }\n            }); \n        }\n    }\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('sassColorPalette')\n        .controller('ResultDialogController', ResultDialogController);\n\n    /* @ngInject */\n    function ResultDialogController($scope, sassService) {\n        var vm = this;\n\n        vm.output = sassService.getSass();\n\n        // Select contents of textarea\n        vm.selectText = function($event) {\n            $event.target.select();\n        };\n    }\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('sassColorPalette')\n        .controller('SettingsController', SettingsController);\n\n    /* @ngInject */\n    function SettingsController($scope, settingsService, PATTERN) {\n        var vm = this;\n        \n        // Use settings from the service\n        vm.settings = settingsService.getSettings();\n\n        // Valid character set for variable names\n        vm.namePattern = PATTERN;\n\n        // Watch for changes on the settings object\n        $scope.$watch(function() {\n            return vm.settings;\n        }, function(newVal) {\n            settingsService.update(newVal);\n        }, true);\n    }\n\n}());\n","(function(ColorThief) {\n    'use strict';\n\n    angular\n        .module('sassColorPalette')\n        .directive('imageDrop', imageDrop);\n\n    /* @ngInject */\n    function imageDrop(colorService, settingsService) {\n        var directive = {\n            restrict: 'EA',\n            templateUrl: 'src/templates/imagedrop.html',\n            replace: true,\n            link: link\n        };\n\n        return directive;\n\n        /**\n         * Directive link function\n         * @param scope\n         * @param elem\n         */\n        function link(scope, elem) {\n            var colorThief = new ColorThief();\n\n            disableDefault();\n\n            // Listen for drop events on directive element\n            elem[0].addEventListener('drop', handleFileDrop);\n            elem[0].addEventListener('dragenter', handleDragEnter);\n            elem[0].addEventListener('dragleave', handleDragLeave);\n\n            /**\n             * Gets triggerd when user drops file in dropzone\n             * @param event\n             */\n            function handleFileDrop(event) {\n                event.preventDefault();\n\n                elem[0].classList.remove('dragging');\n\n                scope.isBusy = true;\n\n                for (var i = 0; i < event.dataTransfer.files.length; i++) {\n                    var file = event.dataTransfer.files[i];\n\n                    // Check if dropped file is an image\n                    if (file.type.match(/image.*/)) {\n                        var reader = new FileReader();\n\n                        reader.onload = handleFileLoad;\n\n                        reader.readAsDataURL(file);\n                    } else {\n                        scope.isBusy = false;\n\n                        window.alert('Filetype not supported.');\n                    }\n                }\n            }\n\n            /**\n             * Add class when user drags file over dropzone\n             */\n            function handleDragEnter() {\n                elem[0].classList.add('dragging');\n            }\n\n            /**\n             * Remove class when user drags file out of dropzone\n             */\n            function handleDragLeave() {\n                elem[0].classList.remove('dragging');\n            }\n\n            /**\n            * Gets triggered when file is loaded\n            * Creates new image object and calls colorThief\n            * @param event\n            */\n            function handleFileLoad(event) {\n                var img = new Image();\n\n                img.src = event.target.result;\n\n                // Add image to dom\n                var imgElem = document.createElement('img');\n                imgElem.setAttribute('src', img.src);\n                imgElem.setAttribute('alt', 'imagedrop image');\n                imgElem.classList.add('imagedrop-image');\n                imgElem.classList.add('loading');\n\n                // Clear container and add image to it\n                var container = $(elem).find('.imagedrop-image-container');\n                container.empty();\n                container.append(imgElem);\n\n                elem[0].classList.add('contains-image');\n\n                // Wait before the actual image is loaded\n                img.onload = function() {\n                    var size = settingsService.getSettings().amount, \n                        colors = colorThief.getPalette(img, size);\n\n                    colorService.updateColors(colors);\n\n                    scope.isBusy = false;\n                    scope.$apply();\n\n                    imgElem.classList.remove('loading');\n                };\n            }\n\n            /**\n             * Disables default drag/drop browser behavior\n             */\n            function disableDefault() {\n                window.addEventListener('dragover', function(e){\n                    e = e || event;\n                    e.preventDefault();\n                }, false);\n                window.addEventListener('drop', function(e){\n                    e = e || event;\n                    e.preventDefault();\n                }, false);\n            }\n        }\n    }\n}(ColorThief));\n","(function(ntc) {\n    'use strict';\n\n    angular\n        .module('sassColorPalette')\n        .factory('colorService', colorService);\n\n    /* @ngInject */\n    function colorService($rootScope, EVENTS) {\n        var colorStorage = [];\n\n        var service = {\n            updateColors: updateColors,\n            getColors: getColors\n        };\n\n        return service;\n\n        /**\n         * Returns stored colors\n         * @return {array}\n         */\n        function getColors() {\n            return colorStorage;\n        }\n\n        /**\n         * Update colors stored in the service\n         * @param {array} colors\n         */\n        function updateColors(colors) {\n            // start with clean color list\n            colorStorage = [];\n\n            colors.forEach(function(c) {\n                var color = {\n                    rgb: createRgbString(c),\n                    hex: createHexString(c),\n                    name: ''\n                };\n\n                // Get color name, used for autofill option\n                var name = ntc.name(color.hex)[1];\n                color.autofill = name.replace(/\\s+/g, '-').toLowerCase();\n\n                colorStorage.push(color);\n            });\n\n            $rootScope.$emit(EVENTS.COLORS_UPDATE, colorStorage);\n        }\n\n        /**\n         * Creates rgb(255, 255, 255) string\n         * @param {array} rgb [123, 38, 8] color values\n         * @return {string}\n         */\n        function createRgbString(rgb) {\n            return 'rgb(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ')';\n        }\n\n        /**\n         * Creates #FFFFFF string\n         * @param {array} rgb [123, 38, 8] color values\n         * @return {string}\n         */\n        function createHexString(rgb) {\n            return '#' + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);\n        }\n    }\n\n}(window.ntc));\n","(function() {\n    'use strict';\n\n    angular\n        .module('sassColorPalette')\n        .factory('sassService', sassService);\n\n    /* @ngInject */\n    function sassService(settingsService) {\n        var sassVariables = '',\n            service = {\n                createSass: createSass,\n                getSass: getSass\n            };\n\n        return service;\n\n        /**\n         * Creates valid sass variables from an array of colors\n         * @param {array} colors - List of hex values\n         * @param {string} prefix - Every variable name will start with given prefix\n         * @return {string}\n         */\n        function createSass(colors) {\n            var result = '',\n                settings = settingsService.getSettings(),\n                prefix = settings.type + settings.prefix;\n\n            // Create string with all sass variabales\n            colors.forEach(function(color) {\n                var variable = prefix + color.name + ': ' + color.hex + ';\\n';\n\n                result += variable;\n            });\n\n            // Store result in the service\n            sassVariables = result;\n\n            return result;\n        }\n\n        /**\n         * Makes stored sass output available to controllers\n         * @return {string}\n         */\n        function getSass() {\n            return sassVariables;\n        }\n    }\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('sassColorPalette')\n        .factory('settingsService', settingsService);\n\n    /* @ngInject */\n    function settingsService($rootScope, EVENTS) {\n        var service = {\n            getSettings: getSettings,\n            update: update\n        };\n\n        // Default settings\n        var settings =  {\n            prefix: 'color-',\n            amount: 10,\n            autofill: false,\n            type: '$'\n        };\n\n        return service;\n\n        /**\n         * Gets settings object\n         * @return {Object}\n         */\n        function getSettings() {\n            return settings;\n        }\n\n        /**\n         * Updates settings with new values\n         * @param {Object} newSettings\n         */\n        function update(newSettings) {\n            angular.extend(settings, newSettings);\n\n            // Emit event to let controllers know settings have been updated\n            $rootScope.$emit(EVENTS.SETTINGS_CHANGE, settings);\n        }\n    }\n\n}());\n"],"sourceRoot":"/source/"}